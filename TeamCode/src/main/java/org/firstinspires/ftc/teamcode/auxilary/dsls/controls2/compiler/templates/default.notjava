package org.firstinspires.ftc.teamcode.auxilary.dsls.controls2.compiler;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareDevice;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.teamcode.auxilary.ColorSensor;
import org.firstinspires.ftc.teamcode.auxilary.EncodedMotor;
import org.firstinspires.ftc.teamcode.auxilary.PaulMath;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.AutoautoProgram;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.VariableReference;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.runtime.AutoautoRuntime;
import org.firstinspires.ftc.teamcode.managers.FeatureManager;
import org.firstinspires.ftc.teamcode.unitTests.dummy.DummyHardwareMap;
import org.firstinspires.ftc.teamcode.unitTests.dummy.DummyTelemetry;
import org.junit.Test;

import java.util.Iterator;
import java.util.Map;

@TeleOp
public class template extends OpMode {
    private static int NOT_HARDWARE = 0;
    private static int DCMOTOR = 0;
    private static int SERVO = 0;

    long startTimeMs;

/*VARIABLES*/

    public void init() {
        FeatureManager.setIsOpModeRunning(true);
        FeatureManager.logger.setBackend(telemetry.log());

/*TYPE_SETUP_CODE*/
    }

    public void loop() {
        try {
            if (startTimeMs == -1) startTimeMs = System.currentTimeMillis();
            /*RESETTING*/

            /*INPUT_SETTING*/
            /*BUILTINS*/
            /*GENERATED_JAVA*/

            /*HARDWARE_SETTING*/
        } catch(Throwable e) {
            FeatureManager.logger.log(e.toString());
        }
    }

    @Test
    public void runTest() {
        this.telemetry = new DummyTelemetry();
        this.hardwareMap = new DummyHardwareMap();
        this.init();
        for(int i = 0; i < 3; i++) this.loop();
        this.stop();
        telemetry.update();
    }

    @Override
    public void stop() {
        FeatureManager.setIsOpModeRunning(false);
    }


    public float arrayAverage(float[] v) {
        float total = 0;
        for(float f : v) total += f;
        return total / v.length;
    }
}
