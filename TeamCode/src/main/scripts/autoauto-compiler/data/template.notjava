/*PACKAGE_DECLARATION*/

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ColorRangeSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.hardware.Servo;
import org.firstinspires.ftc.teamcode.auxilary.buildhistory.BuildHistory;

import org.firstinspires.ftc.teamcode.managers.feature.FeatureManager;
import org.firstinspires.ftc.teamcode.managers.sensor.ColorSensor;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.*;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.*;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.*;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.primitives.*;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.runtime.AutoautoRuntime;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.runtime.AutoautoOpmode;
import org.firstinspires.ftc.teamcode.managers.*;
import org.firstinspires.ftc.teamcode.managers.CV.CVManager;
import org.firstinspires.ftc.teamcode.managers.imu.ImuManager;
import org.firstinspires.ftc.teamcode.managers.manipulation.ManipulationManager;
import org.firstinspires.ftc.teamcode.managers.movement.MovementManager;
import org.firstinspires.ftc.teamcode.managers.sensor.SensorManager;
import org.firstinspires.ftc.teamcode.managers.telemetry.TelemetryManager;
import org.firstinspires.ftc.teamcode.managers.nate.NateManager;

import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.Location.L;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.AutoautoProgram.P;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.runtime.AutoautoRuntime.R;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.Statepath.S;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.State.A;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.NextStatement.N;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.ValueStatement.F;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.AfterStatement.W;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.FunctionCall.M;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.ArithmeticValue.O;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.primitives.AutoautoNumericValue.C;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.primitives.AutoautoString.U;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.AutoautoTableLiteral.K;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.primitives.AutoautoUnitValue.E;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.GotoStatement.G;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.LetStatement.D;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.IfStatement.I;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.VariableReference.H;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.primitives.AutoautoBooleanValue.B;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.FunctionDefStatement.J;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.TitledArgument.V;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.AutoautoFunctionLiteral.Q;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.statements.PassStatement.Y;
import static org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.model.values.AutoautoTailedValue.Z;
import com.qualcomm.robotcore.hardware.TouchSensor;

import java.util.HashMap;

@Autonomous(name = "/*NO_CONFLICT_NAME*/")
public class template extends AutoautoOpmode {
    MovementManager driver;
    ManipulationManager limbs;
    ImuManager imu;
    CVManager cv;
    NateManager clawPosition;

    public static AutoautoProgram program = generateProgram();

    AutoautoRuntime runtime;
    public void init() {
        FeatureManager.setIsOpModeRunning(true);
        FeatureManager.reconfigureForAuto();

        TelemetryManager telemetryManager = new TelemetryManager(telemetry, this);
        telemetry = telemetryManager;
        FeatureManager.logger.setBackend(telemetry.log());

        driver = new MovementManager(hardwareMap.get(DcMotor.class, "fl"),
                hardwareMap.get(DcMotor.class, "fr"),
                hardwareMap.get(DcMotor.class, "br"),
                hardwareMap.get(DcMotor.class, "bl"));
        limbs = new ManipulationManager(
                                hardwareMap,
                                new String[] { "nateMoverLeft", "nateMoverRight"},
                                new String[] {"nateClaw", "rampLeft", "rampRight", "intakeMoverRight", "intakeMoverLeft"},
                                new String[] {"Carousel", "ClawMotor", "noodle", "intake"}
                        );

        clawPosition = new NateManager(limbs, hardwareMap.get(TouchSensor.class, "limit"));

        cv = new CVManager(hardwareMap);

            imu = new ImuManager(hardwareMap.get(com.qualcomm.hardware.bosch.BNO055IMU.class, "imu"));

        StringBuilder programJson = new StringBuilder();
        String simpleProgramJson = "";

        /*JSON_SETTING_CODE*/

        runtime = R(program, getClass().getCanonicalName(), imu, driver, limbs, telemetryManager, clawPosition, cv);

        limbs.setMotorMode("ClawMotor", DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        telemetryManager.autoauto.setProgramJson(programJson.toString());
        telemetryManager.autoauto.setProgramOutlineJson(simpleProgramJson);
        telemetryManager.autoauto.setGlobalScope(runtime.rootModule.globalScope);
    }

    boolean shouldActuallyDoThings = true;

    public void loop() {
        telemetry.addData("Build Name", BuildHistory.buildName);
        telemetry.addData("Build Time", BuildHistory.buildTimeIso);
        telemetry.update();
        try {
            if(shouldActuallyDoThings) runtime.loop();
        } catch (Throwable t) {
            FeatureManager.logger.log("ERROR IN AUTOAUTO!");
            FeatureManager.logger.log(t.toString());
            StackTraceElement[] e = t.getStackTrace();
            for(int i = 0; i < /*ERROR_STACK_TRACE_HEIGHT*/ && i < e.length;i++) {
                FeatureManager.logger.log(e[i].toString());
            }
            FeatureManager.logger.log(runtime.getCurrentStatepath() + ":" + runtime.getCurrentState());
            shouldActuallyDoThings = false;
        }
    }

    @Override
    public void stop() {
        FeatureManager.setIsOpModeRunning(false);
    }
    /*USER_DEFINED_FUNCTIONS*/

    public static AutoautoProgram generateProgram() {
    AutoautoProgram.fileName = "/*SOURCE_FILE_NAME*/";

/*JAVA_CREATION_CODE*/
    }
}
