module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
  (function () {
    "use strict";

    function peg$subclass(child, parent) {
      function ctor() { this.constructor = child; }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
    }

    function peg$SyntaxError(message, expected, found, location) {
      this.message = message;
      this.expected = expected;
      this.found = found;
      this.location = location;
      this.name = "SyntaxError";

      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
      }
    }

    peg$subclass(peg$SyntaxError, Error);

    peg$SyntaxError.buildMessage = function (expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function (expectation) {
          var escapedParts = "",
            i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function (expectation) {
          return "any character";
        },

        end: function (expectation) {
          return "end of input";
        },

        other: function (expectation) {
          return expectation.description;
        }
      };

      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }

      function literalEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/"/g, '\\"')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch); });
      }

      function classEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/\]/g, '\\]')
          .replace(/\^/g, '\\^')
          .replace(/-/g, '\\-')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch); });
      }

      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }

      function describeExpected(expected) {
        var descriptions = new Array(expected.length),
          i, j;

        for (i = 0; i < expected.length; i++) {
          descriptions[i] = describeExpectation(expected[i]);
        }

        descriptions.sort();

        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }

        switch (descriptions.length) {
          case 1:
            return descriptions[0];

          case 2:
            return descriptions[0] + " or " + descriptions[1];

          default:
            return descriptions.slice(0, -1).join(", ")
              + ", or "
              + descriptions[descriptions.length - 1];
        }
      }

      function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
      }

      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };

    function peg$parse(input, options) {
      options = options !== void 0 ? options : {};

      var peg$FAILED = {},

        peg$startRuleFunctions = { autoautoFile: peg$parseautoautoFile },
        peg$startRuleFunction = peg$parseautoautoFile,

        peg$c0 = function (c, f, u, s) {
          return {
            comments: c,
            type: "Program", location: location(),
            frontMatter: f,
            statepaths: u ? [u].concat(s) : s
          }
        },
        peg$c1 = function (head, tail) {
          return {
            type: "FrontMatter", location: location(),
            values: [head].concat(tail.map(x => x[2]))
          }
        },
        peg$c2 = function (c, k, v) {
          return {
            comments: c,
            type: "FrontMatterKeyValue", location: location(),
            key: k,
            value: v
          }
        },
        peg$c3 = function (c, s) {
          return { comments: c, type: "LabeledStatepath", location: location(), statepath: s, label: "<init>" }
        },
        peg$c4 = function (c, l, s) {
          return { comments: c, type: "LabeledStatepath", location: location(), statepath: s, label: l.value }
        },
        peg$c5 = function (head, tail) {
          return {
            type: "Statepath", location: location(),
            states: [head].concat(tail.map(x => x[1]))
          }
        },
        peg$c6 = function (c, head, tail) {
          return {
            comments: c,
            type: "State", location: location(),
            statement: [head].concat(tail.map(x => x[1]))
          }
        },
        peg$c7 = peg$otherExpectation("block"),
        peg$c8 = function (c, s) {
          return {
            type: "Block",
            state: s || { comments: [], type: "State", location: location(), statement: [] },
            location: location(),
            comments: c
          };
        },
        peg$c9 = peg$otherExpectation("statement"),
        peg$c10 = function (c, s) {
          if (s.comments && s.comments.length) s.comments = c.concat(s.comments);
          else s.comments = c;

          return s;
        },
        peg$c11 = function (v) { return { type: "ProvideStatement", value: v, location: location() }; },
        peg$c12 = function (d, a) { return [d, (a || [])[1]] },
        peg$c13 = function (d, a) { return [d, (a || [])[3]]; },
        peg$c14 = function (f) {
          return {
            type: "DelegatorExpression",
            delegateTo: f[0],
            location: location(),
            args: f[1] || { type: "ArgumentList", args: [], location: location() }
          }
        },
        peg$c15 = function (u) {
          return { type: "ReturnStatement", location: location(), value: u ? u[1] : undefined };
        },
        peg$c16 = function (u, s) { return { type: "AfterStatement", location: location(), unitValue: u, statement: s } },
        peg$c17 = function (f) { return { type: "ValueStatement", location: location(), call: f } },
        peg$c18 = function (name, args, b) { return { type: "FunctionDefStatement", name: name, args: args || { type: "ArgumentList", args: [], location: location() }, body: b, location: location() }; },
        peg$c19 = function (p) { return { type: "GotoStatement", location: location(), path: p } },
        peg$c20 = function (t, s, e) {
          return { type: "IfStatement", location: location(), conditional: t, statement: s, elseClause: e || { type: "PassStatement", location: location() } }
        },
        peg$c21 = function (c, s) {
          s.comments = c.concat(s.comments);
          return s;
        },
        peg$c22 = function () { return { type: "PassStatement", location: location() } },
        peg$c23 = function (v, val) { return { type: "LetStatement", location: location(), variable: v, value: val } },
        peg$c24 = function (v, val) { return { type: "LetPropertyStatement", location: location(), variable: v, value: val } },
        peg$c25 = function () { return { type: "NextStatement", location: location() } },
        peg$c26 = function (s) { return { type: "SkipStatement", location: location(), skip: s } },
        peg$c27 = function (c, b) { b.comments = c; return b },
        peg$c28 = function (c, v) { v.comments = c.concat(v.comments); return v; },
        peg$c29 = function (l, r) {
          if (!r) return l;

          return { type: "OperatorExpression", location: location(), operator: r[0], left: l, right: r[2] }
        },
        peg$c30 = function (l, o, r) { return [o, r]; },
        peg$c31 = function (l, tail) {
          if (!tail.length) return l;

          var r = { type: "OperatorExpression", location: location(), left: l };
          var tar = r;
          for (var i = 0; i < tail.length - 1; i++) {
            tar.operator = tail[i][0];
            var newTar = { type: "OperatorExpression", location: location(), left: tail[i][1] };
            tar.right = newTar;
            tar = newTar;
          }
          tar.operator = tail[tail.length - 1][0];
          tar.right = tail[tail.length - 1][1];
          return r;
        },
        peg$c32 = function (l, tail) {
          if (!tail.length) return l;

          var r = { type: "OperatorExpression", location: location(), left: l };
          var tar = r;
          for (var i = 0; i < tail.length - 1; i++) {
            tar.operator = tail[i][0];
            var newTar = { type: "OperatorExpression", location: location(), left: tail[i][1] };
            tar.right = newTar;
            tar = newTar;
          }
          tar.operator = tail[tail.length - 1][0];
          tar.right = tail[tail.length - 1][1];
          return r;
        },
        peg$c33 = function (s) {
          return s;
        },
        peg$c34 = function (x) {
          return x;
        },
        peg$c35 = function (a, t) {
          if (!t.length) return a;

          var value = a;
          for (var i = 0; i < t.length; i++) {
            if (t[i].type == "FunctionCall") value = { type: "FunctionCall", func: value, args: t[i].args, location: t[i].location };
            else if (t[i].type == "TailedValue") value = { type: "TailedValue", head: value, tail: t[i].tail, location: t[i].location };
          }

          return value;
        },
        peg$c36 = peg$otherExpectation("function call"),
        peg$c37 = function (a) { return { type: "FunctionCall", func: null, args: a || { type: "ArgumentList", args: [], location: location() }, location: location() } },
        peg$c38 = peg$otherExpectation("array-style property getter (obj[i])"),
        peg$c39 = function (a) { return { type: "TailedValue", head: null, tail: a, location: location() } },
        peg$c40 = peg$otherExpectation("dot-style property getter (obj.prop)"),
        peg$c41 = function (a) { return { type: "TailedValue", head: null, tail: a, location: location() }; },
        peg$c42 = function (i) { return { type: "VariableReference", location: location(), variable: i }; },
        peg$c43 = function (a) {
          return {
            type: "ArrayLiteral", location: location(),
            elems: a || { type: "ArgumentList", args: [], location: location() }
          }
        },
        peg$c44 = function (name, args, b) { return { type: "FunctionLiteral", name: name, args: args || { type: "ArgumentList", args: [], location: location() }, body: b, location: location() }; },
        peg$c45 = function () { return { type: "BooleanLiteral", location: location(), value: true }; },
        peg$c46 = function () { return { type: "BooleanLiteral", location: location(), value: false }; },
        peg$c47 = function (l, o, r) { return { type: "ComparisonOperator", location: location(), left: l, operator: o, right: r }; },
        peg$c48 = function (r) { return r; },
        peg$c49 = peg$otherExpectation("comparison operator"),
        peg$c50 = function (o) { return o; },
        peg$c51 = function (q) { return { type: "StringLiteral", location: location(), str: q.join("") } },
        peg$c52 = function (v, u) { return { type: "UnitValue", location: location(), value: v, unit: u } },
        peg$c53 = function (head, tail) {
          return {
            type: "ArgumentList", location: location(),
            len: tail.length + 1,
            args: [head].concat(tail.map(x => x[1]))
          }
        },
        peg$c54 = function (head, tail) {
          return {
            type: "ArgumentList", location: location(),
            len: tail.length + 1,
            args: [head].concat(tail.map(x => x[1]))
          }
        },
        peg$c55 = function (f) { return f; },
        peg$c56 = function (n, v) {
          return { type: "TitledArgument", value: v, name: n, location: location() };
        },
        peg$c57 = function (v) { return { type: "DynamicValue", value: v, location: location() } },
        peg$c58 = peg$otherExpectation("whitespace"),
        peg$c59 = /^[ \t\n\r]/,
        peg$c60 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        peg$c61 = peg$otherExpectation("comment"),
        peg$c62 = function (c) { return c.map(x => x[1]); },
        peg$c63 = "//",
        peg$c64 = peg$literalExpectation("//", false),
        peg$c65 = /^[^\n]/,
        peg$c66 = peg$classExpectation(["\n"], true, false),
        peg$c67 = function (t) { return t.join("") },
        peg$c68 = "/*",
        peg$c69 = peg$literalExpectation("/*", false),
        peg$c70 = function (i) { return i; },
        peg$c71 = peg$otherExpectation("end of comment"),
        peg$c72 = "*/",
        peg$c73 = peg$literalExpectation("*/", false),
        peg$c74 = peg$anyExpectation(),
        peg$c75 = /^[^"]/,
        peg$c76 = peg$classExpectation(["\""], true, false),
        peg$c77 = "\"",
        peg$c78 = peg$literalExpectation("\"", false),
        peg$c79 = peg$otherExpectation("hashtag"),
        peg$c80 = "#",
        peg$c81 = peg$literalExpectation("#", false),
        peg$c82 = peg$otherExpectation("end of line"),
        peg$c83 = "\r",
        peg$c84 = peg$literalExpectation("\r", false),
        peg$c85 = "\n",
        peg$c86 = peg$literalExpectation("\n", false),
        peg$c87 = peg$otherExpectation("colon"),
        peg$c88 = ":",
        peg$c89 = peg$literalExpectation(":", false),
        peg$c90 = peg$otherExpectation("semicolon"),
        peg$c91 = ";",
        peg$c92 = peg$literalExpectation(";", false),
        peg$c93 = peg$otherExpectation("comma"),
        peg$c94 = ",",
        peg$c95 = peg$literalExpectation(",", false),
        peg$c96 = "after",
        peg$c97 = peg$literalExpectation("after", false),
        peg$c98 = "func",
        peg$c99 = peg$literalExpectation("func", false),
        peg$c100 = "function",
        peg$c101 = peg$literalExpectation("function", false),
        peg$c102 = "goto",
        peg$c103 = peg$literalExpectation("goto", false),
        peg$c104 = "if",
        peg$c105 = peg$literalExpectation("if", false),
        peg$c106 = "when",
        peg$c107 = peg$literalExpectation("when", false),
        peg$c108 = peg$otherExpectation("opening paren"),
        peg$c109 = "(",
        peg$c110 = peg$literalExpectation("(", false),
        peg$c111 = peg$otherExpectation("closing paren"),
        peg$c112 = ")",
        peg$c113 = peg$literalExpectation(")", false),
        peg$c114 = "let",
        peg$c115 = peg$literalExpectation("let", false),
        peg$c116 = peg$otherExpectation("key/value separator (= or :)"),
        peg$c117 = peg$otherExpectation("equals sign"),
        peg$c118 = "=",
        peg$c119 = peg$literalExpectation("=", false),
        peg$c120 = "next",
        peg$c121 = peg$literalExpectation("next", false),
        peg$c122 = "skip",
        peg$c123 = peg$literalExpectation("skip", false),
        peg$c124 = "<=",
        peg$c125 = peg$literalExpectation("<=", false),
        peg$c126 = "==",
        peg$c127 = peg$literalExpectation("==", false),
        peg$c128 = "!=",
        peg$c129 = peg$literalExpectation("!=", false),
        peg$c130 = ">=",
        peg$c131 = peg$literalExpectation(">=", false),
        peg$c132 = ">",
        peg$c133 = peg$literalExpectation(">", false),
        peg$c134 = "<",
        peg$c135 = peg$literalExpectation("<", false),
        peg$c136 = "true",
        peg$c137 = peg$literalExpectation("true", false),
        peg$c138 = "false",
        peg$c139 = peg$literalExpectation("false", false),
        peg$c140 = peg$otherExpectation("arithmetic operator"),
        peg$c141 = "+",
        peg$c142 = peg$literalExpectation("+", false),
        peg$c143 = "-",
        peg$c144 = peg$literalExpectation("-", false),
        peg$c145 = "/",
        peg$c146 = peg$literalExpectation("/", false),
        peg$c147 = "*",
        peg$c148 = peg$literalExpectation("*", false),
        peg$c149 = "%",
        peg$c150 = peg$literalExpectation("%", false),
        peg$c151 = "^",
        peg$c152 = peg$literalExpectation("^", false),
        peg$c153 = "**",
        peg$c154 = peg$literalExpectation("**", false),
        peg$c155 = peg$otherExpectation("dollar sign"),
        peg$c156 = "$",
        peg$c157 = peg$literalExpectation("$", false),
        peg$c158 = peg$otherExpectation("opening square bracket"),
        peg$c159 = "[",
        peg$c160 = peg$literalExpectation("[", false),
        peg$c161 = peg$otherExpectation("closing square bracket"),
        peg$c162 = "]",
        peg$c163 = peg$literalExpectation("]", false),
        peg$c164 = peg$otherExpectation("opening curly bracket"),
        peg$c165 = "{",
        peg$c166 = peg$literalExpectation("{", false),
        peg$c167 = peg$otherExpectation("closing curly bracket"),
        peg$c168 = "}",
        peg$c169 = peg$literalExpectation("}", false),
        peg$c170 = peg$otherExpectation("dot (.)"),
        peg$c171 = ".",
        peg$c172 = peg$literalExpectation(".", false),
        peg$c173 = "return",
        peg$c174 = peg$literalExpectation("return", false),
        peg$c175 = "provide",
        peg$c176 = peg$literalExpectation("provide", false),
        peg$c177 = "delegate",
        peg$c178 = peg$literalExpectation("delegate", false),
        peg$c179 = "pass",
        peg$c180 = peg$literalExpectation("pass", false),
        peg$c181 = "else",
        peg$c182 = peg$literalExpectation("else", false),
        peg$c183 = "otherwise",
        peg$c184 = peg$literalExpectation("otherwise", false),
        peg$c185 = "with",
        peg$c186 = peg$literalExpectation("with", false),
        peg$c187 = function (l) {
          var name = l.join("");
          var reserved = ["if", "goto", "skip", "let", "next", "function", "func", "when", "after", "return", "provide", "delegate"];
          if (reserved.indexOf(name) == -1) return true;
          else return false;
        },
        peg$c188 = function (l) { return { type: "Identifier", location: location(), value: l.join("") } },
        peg$c189 = peg$otherExpectation("digit"),
        peg$c190 = /^[0-9]/,
        peg$c191 = peg$classExpectation([["0", "9"]], false, false),
        peg$c192 = peg$otherExpectation("letter"),
        peg$c193 = /^[A-Za-z_]/,
        peg$c194 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false),
        peg$c195 = function (m, h, t) { return h.join("") + "." + t.join("") },
        peg$c196 = function (m, d) { return d.join(""); },
        peg$c197 = function (m, v) {
          return { type: "NumericValue", location: location(), v: parseFloat((m || "") + v) }
        },
        peg$c198 = function (n, u) {
          return { type: "UnitValue", location: location(), value: n, unit: u }
        },

        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{ line: 1, column: 1 }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,

        peg$resultsCache = {},

        peg$result;

      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }

      function text() {
        return input.substring(peg$savedPos, peg$currPos);
      }

      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }

      function expected(description, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildStructuredError(
          [peg$otherExpectation(description)],
          input.substring(peg$savedPos, peg$currPos),
          location
        );
      }

      function error(message, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildSimpleError(message, location);
      }

      function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
      }

      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
      }

      function peg$anyExpectation() {
        return { type: "any" };
      }

      function peg$endExpectation() {
        return { type: "end" };
      }

      function peg$otherExpectation(description) {
        return { type: "other", description: description };
      }

      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p;

        if (details) {
          return details;
        } else {
          p = pos - 1;
          while (!peg$posDetailsCache[p]) {
            p--;
          }

          details = peg$posDetailsCache[p];
          details = {
            line: details.line,
            column: details.column
          };

          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }

            p++;
          }

          peg$posDetailsCache[pos] = details;
          return details;
        }
      }

      function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);

        return {
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column
          }
        };
      }

      function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) { return; }

        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }

        peg$maxFailExpected.push(expected);
      }

      function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
      }

      function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
          peg$SyntaxError.buildMessage(expected, found),
          expected,
          found,
          location
        );
      }

      function peg$parseautoautoFile() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 0,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefrontMatter();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseunlabeledStatepath();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parselabeledStatepath();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parselabeledStatepath();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsecommentedWhitespace();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c0(s1, s2, s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsefrontMatter() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;

        var key = peg$currPos * 108 + 1,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseDOLLAR_SIGN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefrontMatterKeyValue();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parseCOMMA();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsefrontMatterKeyValue();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parseCOMMA();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsefrontMatterKeyValue();
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseDOLLAR_SIGN();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c1(s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsefrontMatterKeyValue() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 2,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIDENTIFIER();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCOLON();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsevalue();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c2(s1, s2, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseunlabeledStatepath() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 3,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatepath();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c3(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parselabeledStatepath() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 4,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatepathLabelIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCOLON();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestatepath();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s1, s2, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsestatepath() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 5,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsestate();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parseSEMICOLON();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestate();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseSEMICOLON();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestate();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseSEMICOLON();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c5(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsestate() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 6,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatement();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestatement();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parseCOMMA();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestatement();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c6(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsestatement() {
        var s0;

        var key = peg$currPos * 108 + 7,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$parsesingleStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemultiStatement();
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsemultiStatement() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 108 + 8,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_CURLY_BRACKET();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsestate();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_CURLY_BRACKET();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c8(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsesingleStatement() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 9,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsereturnStatement();
          if (s2 === peg$FAILED) {
            s2 = peg$parseprovideStatement();
            if (s2 === peg$FAILED) {
              s2 = peg$parsepassStatement();
              if (s2 === peg$FAILED) {
                s2 = peg$parsevalueStatement();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsefuncDefStatement();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseafterStatement();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsegotoStatement();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseifStatement();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseletStatement();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsenextStatement();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseskipStatement();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c10(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseprovideStatement() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 10,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsePROVIDE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsevalue();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c11(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsedelegatorExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        var key = peg$currPos * 108 + 11,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseDELEGATE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseOPEN_PAREN();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestringLiteral();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parseCOMMA();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsevalueList();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseCLOSE_PAREN();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c12(s5, s7);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsestringLiteral();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseWITH();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsevalueList();
                      if (s9 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c13(s4, s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c14(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsereturnStatement() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 108 + 12,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseRETURN();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsevalue();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c15(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseafterStatement() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 108 + 13,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseAFTER();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsevalue();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestatement();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c16(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsevalueStatement() {
        var s0, s1;

        var key = peg$currPos * 108 + 14,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsevalue();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsefuncDefStatement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

        var key = peg$currPos * 108 + 15,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseFUNCTION();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENTIFIER();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseOPEN_PAREN();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseargumentList();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseCLOSE_PAREN();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestatement();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c18(s3, s6, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsegotoStatement() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 16,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseGOTO();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENTIFIER();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c19(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseifStatement() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 108 + 17,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseIF();
        if (s1 === peg$FAILED) {
          s1 = peg$parseWHEN();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseOPEN_PAREN();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsevalue();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseCLOSE_PAREN();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsestatement();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseelseClause();
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c20(s4, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseelseClause() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 108 + 18,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseELSE();
          if (s2 === peg$FAILED) {
            s2 = peg$parseOTHERWISE();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsestatement();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsepassStatement() {
        var s0, s1;

        var key = peg$currPos * 108 + 19,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsePASS();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22();
        }
        s0 = s1;

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseletStatement() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 108 + 20,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseLET();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENTIFIER();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseEQUALS();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsevalue();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c23(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLET();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsebaseExpression();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseEQUALS();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsevalue();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c24(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsenextStatement() {
        var s0, s1;

        var key = peg$currPos * 108 + 21,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseNEXT();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25();
        }
        s0 = s1;

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseskipStatement() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 22,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseSKIP();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevalue();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c26(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsevalue() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 23,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseboolean();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsevalueInParens() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 108 + 24,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsecommentedWhitespace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseOPEN_PAREN();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsevalue();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAREN();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c28(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsemodulo() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 25,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsebaseExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseMODULUS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsebaseExpression();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseexponent() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 26,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsemodulo();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseEXPONENTIATE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsemodulo();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseproduct() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 108 + 27,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseexponent();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parseMULTIPLY();
            if (s5 === peg$FAILED) {
              s5 = peg$parseDIVIDE();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseproduct();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c30(s1, s5, s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parseMULTIPLY();
              if (s5 === peg$FAILED) {
                s5 = peg$parseDIVIDE();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseproduct();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c30(s1, s5, s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c31(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsesum() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 108 + 28,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseproduct();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parsePLUS();
            if (s5 === peg$FAILED) {
              s5 = peg$parseMINUS();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseproduct();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c30(s1, s5, s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsePLUS();
              if (s5 === peg$FAILED) {
                s5 = peg$parseMINUS();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseproduct();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c30(s1, s5, s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsearithmeticValue() {
        var s0, s1;

        var key = peg$currPos * 108 + 29,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsesum();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseatom() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 30,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsearrayLiteral();
          if (s2 === peg$FAILED) {
            s2 = peg$parsestringLiteral();
            if (s2 === peg$FAILED) {
              s2 = peg$parsetitledArgument();
              if (s2 === peg$FAILED) {
                s2 = peg$parseunitValue();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsebooleanLiteral();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseNUMERIC_VALUE();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsefunctionLiteral();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsevariableReference();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsevalueInParens();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsedelegatorExpression();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c34(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsebaseExpression() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 108 + 31,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseatom();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parsetail();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsetail();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsetail() {
        var s0;

        var key = peg$currPos * 108 + 32,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$parsearrayStyleGetter();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecallFunction();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedotStyleGetter();
          }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsecallFunction() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 108 + 33,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseOPEN_PAREN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsevalueList();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_PAREN();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsearrayStyleGetter() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 34,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseOPEN_SQUARE_BRACKET();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevalue();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCLOSE_SQUARE_BRACKET();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c39(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsedotStyleGetter() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 35,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseDOT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIDENTIFIER();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c41(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsevariableReference() {
        var s0, s1;

        var key = peg$currPos * 108 + 36,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseIDENTIFIER();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsearrayLiteral() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 108 + 37,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseOPEN_SQUARE_BRACKET();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsevalueList();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCLOSE_SQUARE_BRACKET();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c43(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsefunctionLiteral() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

        var key = peg$currPos * 108 + 38,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseFUNC();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENTIFIER();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseOPEN_PAREN();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseargumentList();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseCLOSE_PAREN();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestatement();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c44(s3, s6, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsebooleanLiteral() {
        var s0, s1;

        var key = peg$currPos * 108 + 39,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseTRUE();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFALSE();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c46();
          }
          s0 = s1;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseboolean() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 108 + 40,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsearithmeticValue();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecomparisonOperator();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsearithmeticValue();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c47(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsearithmeticValue();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c48(s1);
          }
          s0 = s1;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsecomparisonOperator() {
        var s0, s1;

        var key = peg$currPos * 108 + 41,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseCOMPARE_LTE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseCOMPARE_LT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseCOMPARE_EQ();
            if (s1 === peg$FAILED) {
              s1 = peg$parseCOMPARE_NEQ();
              if (s1 === peg$FAILED) {
                s1 = peg$parseCOMPARE_GTE();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseCOMPARE_GT();
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s1);
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsestringLiteral() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 42,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseDOUBLE_QUOTE();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseNON_QUOTE_CHARACTER();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseNON_QUOTE_CHARACTER();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseDOUBLE_QUOTE();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseunitValue() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 43,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseNUMERIC_VALUE();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedynamicValue();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIDENTIFIER();
          if (s2 === peg$FAILED) {
            s2 = peg$parsedynamicValue();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c52(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseargumentList() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 108 + 44,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseargument();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parseCOMMA();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseargument();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseCOMMA();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseargument();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c53(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsevalueList() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 108 + 45,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parsevalue();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parseCOMMA();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevalue();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseCOMMA();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevalue();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c54(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseargument() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 46,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$parsetitledArgument();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIDENTIFIER();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c55(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsetitledArgument() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 47,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIDENTIFIER();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseTITLE_ARG_SEP();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsevalue();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c56(s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsedynamicValue() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 48,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseOPEN_SQUARE_BRACKET();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevalue();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCLOSE_SQUARE_BRACKET();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c57(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parse_() {
        var s0, s1;

        var key = peg$currPos * 108 + 49,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = [];
        if (peg$c59.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c59.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsecommentedWhitespace() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 108 + 50,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsecomment();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsecomment();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c62(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsecomment() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 108 + 51,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c63) {
          s1 = peg$c63;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c65.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c66); }
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEOL();
            if (s3 === peg$FAILED) {
              s3 = peg$parseEOF();
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c67(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c68) {
            s1 = peg$c68;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsecommentText();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsecommentText();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseEND_OF_COMMENT();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c67(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsestatepathLabelIdentifier() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 52,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseHASHTAG();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIDENTIFIER();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c70(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseEND_OF_COMMENT() {
        var s0, s1;

        var key = peg$currPos * 108 + 53,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c72) {
          s0 = peg$c72;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsecommentText() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 54,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c72) {
          s2 = peg$c72;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = void 0;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c55(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseNON_QUOTE_CHARACTER() {
        var s0;

        var key = peg$currPos * 108 + 55,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (peg$c75.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseDOUBLE_QUOTE() {
        var s0;

        var key = peg$currPos * 108 + 56,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c77;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseHASHTAG() {
        var s0, s1;

        var key = peg$currPos * 108 + 57,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 35) {
          s0 = peg$c80;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseEOL() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 58,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 13) {
          s1 = peg$c83;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s2 = peg$c85;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c86); }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOLON() {
        var s0, s1;

        var key = peg$currPos * 108 + 59,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 58) {
          s0 = peg$c88;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c89); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseSEMICOLON() {
        var s0, s1;

        var key = peg$currPos * 108 + 60,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 59) {
          s0 = peg$c91;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOMMA() {
        var s0, s1;

        var key = peg$currPos * 108 + 61,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 44) {
          s0 = peg$c94;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseAFTER() {
        var s0;

        var key = peg$currPos * 108 + 62,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 5) === peg$c96) {
          s0 = peg$c96;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseFUNC() {
        var s0;

        var key = peg$currPos * 108 + 63,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c98) {
          s0 = peg$c98;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c99); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseFUNCTION() {
        var s0;

        var key = peg$currPos * 108 + 64,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 8) === peg$c100) {
          s0 = peg$c100;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseGOTO() {
        var s0;

        var key = peg$currPos * 108 + 65,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c102) {
          s0 = peg$c102;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseIF() {
        var s0;

        var key = peg$currPos * 108 + 66,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c104) {
          s0 = peg$c104;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseWHEN() {
        var s0;

        var key = peg$currPos * 108 + 67,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c106) {
          s0 = peg$c106;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseOPEN_PAREN() {
        var s0, s1;

        var key = peg$currPos * 108 + 68,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 40) {
          s0 = peg$c109;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c108); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCLOSE_PAREN() {
        var s0, s1;

        var key = peg$currPos * 108 + 69,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 41) {
          s0 = peg$c112;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseLET() {
        var s0;

        var key = peg$currPos * 108 + 70,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 3) === peg$c114) {
          s0 = peg$c114;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseTITLE_ARG_SEP() {
        var s0, s1;

        var key = peg$currPos * 108 + 71,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        s0 = peg$parseEQUALS();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCOLON();
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseEQUALS() {
        var s0, s1;

        var key = peg$currPos * 108 + 72,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s0 = peg$c118;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c117); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseNEXT() {
        var s0;

        var key = peg$currPos * 108 + 73,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c120) {
          s0 = peg$c120;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseSKIP() {
        var s0;

        var key = peg$currPos * 108 + 74,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c122) {
          s0 = peg$c122;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOMPARE_LTE() {
        var s0;

        var key = peg$currPos * 108 + 75,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c124) {
          s0 = peg$c124;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOMPARE_EQ() {
        var s0;

        var key = peg$currPos * 108 + 76,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c126) {
          s0 = peg$c126;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOMPARE_NEQ() {
        var s0;

        var key = peg$currPos * 108 + 77,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c128) {
          s0 = peg$c128;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOMPARE_GTE() {
        var s0;

        var key = peg$currPos * 108 + 78,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c130) {
          s0 = peg$c130;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOMPARE_GT() {
        var s0;

        var key = peg$currPos * 108 + 79,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 62) {
          s0 = peg$c132;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c133); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCOMPARE_LT() {
        var s0;

        var key = peg$currPos * 108 + 80,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 60) {
          s0 = peg$c134;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseTRUE() {
        var s0;

        var key = peg$currPos * 108 + 81,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c136) {
          s0 = peg$c136;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseFALSE() {
        var s0;

        var key = peg$currPos * 108 + 82,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 5) === peg$c138) {
          s0 = peg$c138;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsePLUS() {
        var s0, s1;

        var key = peg$currPos * 108 + 83,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 43) {
          s0 = peg$c141;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c142); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseMINUS() {
        var s0, s1;

        var key = peg$currPos * 108 + 84,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c143;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c144); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseDIVIDE() {
        var s0, s1;

        var key = peg$currPos * 108 + 85,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 47) {
          s0 = peg$c145;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c146); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseMULTIPLY() {
        var s0, s1;

        var key = peg$currPos * 108 + 86,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c147;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c148); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseMODULUS() {
        var s0, s1;

        var key = peg$currPos * 108 + 87,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 37) {
          s0 = peg$c149;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c150); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseEXPONENTIATE() {
        var s0, s1;

        var key = peg$currPos * 108 + 88,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 94) {
          s0 = peg$c151;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c153) {
            s0 = peg$c153;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c154); }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseDOLLAR_SIGN() {
        var s0, s1;

        var key = peg$currPos * 108 + 89,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c156;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c157); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c155); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseOPEN_SQUARE_BRACKET() {
        var s0, s1;

        var key = peg$currPos * 108 + 90,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 91) {
          s0 = peg$c159;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c158); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCLOSE_SQUARE_BRACKET() {
        var s0, s1;

        var key = peg$currPos * 108 + 91,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 93) {
          s0 = peg$c162;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c163); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c161); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseOPEN_CURLY_BRACKET() {
        var s0, s1;

        var key = peg$currPos * 108 + 92,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 123) {
          s0 = peg$c165;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c164); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseCLOSE_CURLY_BRACKET() {
        var s0, s1;

        var key = peg$currPos * 108 + 93,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 125) {
          s0 = peg$c168;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c169); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseDOT() {
        var s0, s1;

        var key = peg$currPos * 108 + 94,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 46) {
          s0 = peg$c171;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c172); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c170); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseRETURN() {
        var s0;

        var key = peg$currPos * 108 + 95,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 6) === peg$c173) {
          s0 = peg$c173;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c174); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsePROVIDE() {
        var s0;

        var key = peg$currPos * 108 + 96,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 7) === peg$c175) {
          s0 = peg$c175;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c176); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseDELEGATE() {
        var s0;

        var key = peg$currPos * 108 + 97,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 8) === peg$c177) {
          s0 = peg$c177;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c178); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parsePASS() {
        var s0;

        var key = peg$currPos * 108 + 98,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c179) {
          s0 = peg$c179;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c180); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseELSE() {
        var s0;

        var key = peg$currPos * 108 + 99,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c181) {
          s0 = peg$c181;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c182); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseOTHERWISE() {
        var s0;

        var key = peg$currPos * 108 + 100,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 9) === peg$c183) {
          s0 = peg$c183;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseWITH() {
        var s0;

        var key = peg$currPos * 108 + 101,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        if (input.substr(peg$currPos, 4) === peg$c185) {
          s0 = peg$c185;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c186); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseIDENTIFIER() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 102,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseLETTER();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDIGIT();
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseLETTER();
            if (s2 === peg$FAILED) {
              s2 = peg$parseDIGIT();
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$c187(s1);
          if (s2) {
            s2 = void 0;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c188(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseDIGIT() {
        var s0, s1;

        var key = peg$currPos * 108 + 103,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (peg$c190.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c191); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseLETTER() {
        var s0, s1;

        var key = peg$currPos * 108 + 104,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        peg$silentFails++;
        if (peg$c193.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c192); }
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseNUMERIC_VALUE() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 108 + 105,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseMINUS();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseDIGIT();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDIGIT();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c171;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c172); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseDIGIT();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseDIGIT();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c195(s1, s3, s5);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parseDIGIT();
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseDIGIT();
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c196(s1, s3);
            }
            s2 = s3;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c197(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseNUMERIC_VALUE_WITH_UNIT() {
        var s0, s1, s2;

        var key = peg$currPos * 108 + 106,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseNUMERIC_VALUE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIDENTIFIER();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c198(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      function peg$parseEOF() {
        var s0, s1;

        var key = peg$currPos * 108 + 107,
          cached = peg$resultsCache[key];

        if (cached) {
          peg$currPos = cached.nextPos;

          return cached.result;
        }

        s0 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        peg$silentFails--;
        if (s1 === peg$FAILED) {
          s0 = void 0;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        return s0;
      }

      peg$result = peg$startRuleFunction();

      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation());
        }

        throw peg$buildStructuredError(
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        );
      }
    }

    return {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    };
  })();
