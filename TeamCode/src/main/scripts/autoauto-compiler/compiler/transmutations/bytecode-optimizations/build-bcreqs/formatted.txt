s/<init>/0/stmt/0:
"log"
(  "log"
)getvar
"ULS!"
1
(  (    "log"
)getvar
  "ULS!"
  1
)callfunction
(  (    (      "log"
)getvar
    "ULS!"
    1
)callfunction
)pop
"undefined/stmt/1"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/<init>/0/stmt/1:
undefined
(  undefined
)jmp_l
yield
s/<init>/0:
"s/<init>/0/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/0/stmt/0:
true
"s/ifStatements/0/if_true/1"
(  true
  "s/ifStatements/0/if_true/1"
)jmp_l_cond
"s/ifStatements/0/if_false/2"
(  "s/ifStatements/0/if_false/2"
)jmp_l
yield
s/ifStatements/0/childscope/4/stmt/0:
"log"
(  "log"
)getvar
"this works like java"
1
(  (    "log"
)getvar
  "this works like java"
  1
)callfunction
(  (    (      "log"
)getvar
    "this works like java"
    1
)callfunction
)pop
"undefined/stmt/1"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/0/childscope/4/stmt/1:
"s/ifStatements/1"
(  "s/ifStatements/3/stmt/0"
)jmp_l
yield
s/ifStatements/0/childscope/4:
"s/ifStatements/0/childscope/4/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/0/if_true/1:
"s/ifStatements/0/childscope/4/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/0/if_false/2:
pass
"s/ifStatements/0/if_end/3"
(  "s/ifStatements/0/if_end/3"
)jmp_l
s/ifStatements/0/if_end/3:
"s/ifStatements/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/0:
"s/ifStatements/0/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/1/stmt/0:
false
"s/ifStatements/1/if_true/5"
(  false
  "s/ifStatements/1/if_true/5"
)jmp_l_cond
"s/ifStatements/1/if_false/6"
(  "s/ifStatements/1/if_false/6"
)jmp_l
s/ifStatements/1/stmt/1:
"s/ifStatements/2"
(  "s/ifStatements/3/stmt/0"
)jmp_l
yield
s/ifStatements/1/if_true/5:
"log"
(  "log"
)getvar
"fail"
1
(  (    "log"
)getvar
  "fail"
  1
)callfunction
(  (    (      "log"
)getvar
    "fail"
    1
)callfunction
)pop
"s/ifStatements/1/if_end/7"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/1/if_false/6:
pass
"s/ifStatements/1/if_end/7"
(  "s/ifStatements/1/if_end/7"
)jmp_l
s/ifStatements/1/if_end/7:
"undefined/stmt/1"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/1:
"s/ifStatements/1/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/2/stmt/0:
false
"s/ifStatements/2/if_true/8"
(  false
  "s/ifStatements/2/if_true/8"
)jmp_l_cond
"s/ifStatements/2/if_false/9"
(  "s/ifStatements/2/if_false/9"
)jmp_l
yield
s/ifStatements/2/childscope/b/stmt/0:
"log"
(  "log"
)getvar
"fail"
1
(  (    "log"
)getvar
  "fail"
  1
)callfunction
(  (    (      "log"
)getvar
    "fail"
    1
)callfunction
)pop
"s/ifStatements/2/if_end/a"
(  "s/ifStatements/3/stmt/0"
)jmp_l
yield
s/ifStatements/2/childscope/b:
"s/ifStatements/2/childscope/b/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/2/if_true/8:
"s/ifStatements/2/childscope/b/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/2/childscope/c/stmt/0:
"s/ifStatements/3"
(  "s/ifStatements/3/stmt/0"
)jmp_l
yield
s/ifStatements/2/childscope/c:
"s/ifStatements/2/childscope/c/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/2/if_false/9:
"s/ifStatements/2/childscope/c/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/2/if_end/a:
"s/ifStatements/2"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/2:
"s/ifStatements/2/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
s/ifStatements/3/stmt/0:
undefined
(  undefined
)jmp_l
yield
s/ifStatements/3:
"s/ifStatements/3/stmt/0"
(  "s/ifStatements/3/stmt/0"
)jmp_l
ENTRY:
"s/<init>/0"
(  "s/<init>/0"
)jmp_l